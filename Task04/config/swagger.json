{
	"openapi" : "3.0.3",
	"info" : {
		"title" : "API PI2P",
		"description" : "This is the PI2P RESTful API documentation page to create, read, update, and delete all entities of the PI2P database. This documentation is made using the [Swagger Open Source Editor](https://swagger.io/tools/swagger-editor/). To exit the API documentation and get back to the PI2P website main menu, click [here](/).",
		"contact" : {
			"email" : "francois [point] rebaudo [arobase] ird [point] fr"
		},
		"license" : {
			"name" : "Proprietary"
		},
		"version" : "1.0.1"
	},
	"servers" : [ {
		"url" : "https://pi2p.ird.fr/",
		"description" : "Single access point"
	} ],
	"tags" : [ {
		"name" : "admins",
		"description" : "Access points reserved for administrators"
	}, {
		"name" : "gateways",
		"description" : "Access points reserved for gateways"
	}, {
		"name" : "guests",
		"description" : "Access points for all"
	} ],
	"paths" : {
		"/institutes" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "List the partner institutes of the project",
				"description" : "Allows you to filter the institutes by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listInstitutes",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "name",
						"in" : "query",
						"description" : "filter institutes by name",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "countryCode",
						"in" : "query",
						"description" : "filter institutes by country",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Institute"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new institute",
				"description" : "Create a new institute, with all its properties",
				"operationId" : "addInstitute",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Institute"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Remove all institutes",
				"description" : "Permanently delete all institutes as well as all child elements from each institute. Thank you for using this request with all the necessary precautions!",
				"operationId" : "deleteInstitutes",
				"responses" : {
					"204" : {
						"description" : "collection deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/institutes/{instituteId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Display the details of an institute",
				"description" : "Display an institute with all its information and relationships",
				"operationId" : "getInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"gateways" : {
															"type" : "array",
															"items" : {
																"type" : "string",
																"format" : "uri",
																"example" : "https://pi2p.ird.fr/gateways/1"
															}
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Institute"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Remove an institute",
				"description" : "Permanently delete an institute and its child elements",
				"operationId" : "deleteInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to be deleted",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Update an institute",
				"description" : "Modify the properties of an institute",
				"operationId" : "updateInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to be modified",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_1"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Institute"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/institutes/{instituteId}/report" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "Generate a report for the institute",
				"description" : "Generate, in TeX format, a report of the institute's activity for the given month.",
				"operationId" : "getInstituteReport",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute for which to generate the report",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "month",
					"in" : "query",
					"description" : "number of the month for which to generate the report. By default, the current month is used.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "year",
					"in" : "query",
					"description" : "year for which to generate the report. By default, the current year is used.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "lang",
					"in" : "query",
					"description" : "Language in which to generate the report.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "string",
						"enum": ["french", "spanish", "english"]
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "génération du rapport",
						"content" : {
							"application/x-tex" : {}
						}
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/gateways" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Liste les gateways",
				"description" : "Permet de filtrer les gateways par date de création, ou simplement\nen les listant tous avec une pagination appropriée.\n",
				"operationId" : "listGateways",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "instituteId",
						"in" : "query",
						"description" : "filtrer les instituts par identifiant de l'institut parent",
						"style" : "simple",
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{
						"name" : "name",
						"in" : "query",
						"description" : "filtrer les gateways par nom",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Gateway"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Créé un nouveau gateway",
				"description" : "Créé un nouveau gateway, avec toutes ses propriétés\n",
				"operationId" : "addGateway",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_2"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "création de la ressource",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Gateway"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime tous les gateways",
				"description" : "Supprime de manière définitive tous les gateways ainsi que tous les éléments enfants de chaque gateway (les capteurs et données).\nMerci d'utiliser cette requête avec toutes les précautions qui s'imposent !\n",
				"operationId" : "deleteGateways",
				"responses" : {
					"204" : {
						"description" : "collection supprimée"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/gateways/{gatewayId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Affiche les détails d'un gateway",
				"description" : "Affiche un gateway avec toutes ses informations et relations\n",
				"operationId" : "getGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "identifiant du gateway à afficher\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"institute" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/institutes/1"
														},
														"sensors" : {
															"type" : "array",
															"items" : {
																"type" : "string",
																"format" : "uri",
																"example" : "https://pi2p.ird.fr/sensors/1"
															}
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Gateway"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime un gateway",
				"description" : "Supprime de manière définitive un gateway\nainsi que ses éléments enfants (capteurs, données).\n",
				"operationId" : "deleteGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "identifiant du gateway à afficher\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Met à jour un gateway",
				"description" : "Modifie les propriétés d'un gateway\n",
				"operationId" : "updateGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "identifiant du gateway à afficher\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_3"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Gateway"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Liste les capteurs contenant des données",
				"description" : "Permet de filtrer les capteurs par date de création, ou simplement\nen les listant tous avec une pagination appropriée.\n",
				"operationId" : "listSensors",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "gatewayId",
						"in" : "query",
						"description" : "filtrer les capteurs par identifiant du gateway parent",
						"style" : "simple",
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{
						"name" : "name",
						"in" : "query",
						"description" : "filtrer les capteurs par nom",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "unit",
						"in" : "query",
						"description" : "filtrer les capteurs par unité de la mesure qu'ils fournissent",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "model",
						"in" : "query",
						"description" : "filtrer les capteurs par modèle du capteur utilisé",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Sensor"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Créé un nouveau capteur",
				"description" : "Créé un nouveau capteur, avec toutes ses propriétés\n",
				"operationId" : "addSensor",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_4"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "création de la ressource",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Sensor"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime tous les capteurs",
				"description" : "Supprime de manière définitive tous les capteurs ainsi que tous les éléments enfants de chaque capteur.\nMerci d'utiliser cette requête avec toutes les précautions qui s'imposent !\n",
				"operationId" : "deleteSensors",
				"responses" : {
					"204" : {
						"description" : "collection supprimée"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors/{sensorId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Affiche les détails d'un capteur",
				"description" : "Affiche un capteur avec toutes ses informations et relations\n",
				"operationId" : "getSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "identifiant du capteur à afficher\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"gateway" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/gateways/1"
														},
														"datas" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/sensors/1/datas"
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Sensor"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime un capteur",
				"description" : "Supprime de manière définitive un capteur ainsi que ses éléments enfants\n",
				"operationId" : "deleteSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "identifiant du capteur à supprimer\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Met à jour un capteur",
				"description" : "Modifie les propriétés d'un capteur\n",
				"operationId" : "updateSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "identifiant du capteur à modifier\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_5"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Sensor"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors/{sensorId}/datas" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Affiche les données liées à un capteur",
				"description" : "Permet de filtrer les données d'un capteur par date de création,\nou simplement en les listant tous avec une pagination appropriée.\n",
				"operationId" : "listSensorDatas",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "sensorId",
						"in" : "path",
						"description" : "identifiant du capteur dont les données seront affichées\n",
						"required" : true,
						"style" : "simple",
						"explode" : true,
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Data"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins", "gateways" ],
				"summary" : "Ajoute une valeur aux données du capteur",
				"description" : "Pour un capteur donné, ajoute une valeur. L'unité est celle précisée\ndans la description du capteur.\n",
				"operationId" : "addSensorData",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "identifiant du capteur auquel ajouter une valeur\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_6"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "création de la ressource",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Data"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime les données d'un capteur",
				"description" : "Supprime de manière définitive les données sélectionnées d'un capteur.\nSans filtre, toutes les données seront supprimées !\n",
				"operationId" : "deleteDatas",
				"parameters" : [
					{
						"name" : "sensorId",
						"in" : "path",
						"description" : "identifiant du capteur auquel ajouter une valeur\n",
						"required" : true,
						"style" : "simple",
						"explode" : true,
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" }
				],
				"responses" : {
					"204" : {
						"description" : "collection supprimée"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/groups" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "Liste les groupes hébergeant des capteurs",
				"description" : "Permet de filtrer les groupes par date de création, ou simplement\nen les listant tous avec une pagination appropriée.\n",
				"operationId" : "listGroups",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "name",
						"in" : "query",
						"description" : "filtrer les groupes par nom",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Group"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Créé un nouveau groupe",
				"description" : "Créé un nouvel groupe, avec toutes ses propriétés\n",
				"operationId" : "addGroup",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_7"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "création de la ressource",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime tous les groupes",
				"description" : "Supprime de manière définitive tous les groupes ainsi que tous les éléments enfants de chaque groupe.\nMerci d'utiliser cette requête avec toutes les précautions qui s'imposent !\n",
				"operationId" : "deleteGroups",
				"responses" : {
					"204" : {
						"description" : "collection supprimée"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/groups/{groupId}" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "Affiche les détails d'un groupe",
				"description" : "Affiche un groupe avec toutes ses informations et relations\n",
				"operationId" : "getGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "identifiant du groupe à afficher\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime un groupe",
				"description" : "Supprime de manière définitive un groupe ainsi que ses éléments enfants\n",
				"operationId" : "deleteGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "identifiant du groupe à supprimer\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Met à jour un groupe",
				"description" : "Modifie les propriétés d'un groupe\n",
				"operationId" : "updateGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "identifiant du groupe à modifier\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_8"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/keys" : {
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Créé une nouvelle clef d'accès",
				"description" : "Insère une nouvelle clef d'accès, associée à un groupe\net éventuellement à un gateway.\nLa clef en elle-même ne peut pas être forcée par l'utilisateur :\nelle est générée automatiquement.\n",
				"operationId" : "addKey",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_9"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "création de la ressource",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/ApiKey"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Supprime toutes les clefs",
				"description" : "Supprime de manière définitive toutes les clefs d'accès.\nCette requête peut être utile lorsqu'un accès administrateur est\ncompromis : on ne peut plus compter sur la confidentalité d'aucune\nclef, et il faut les révoquer toutes.\n",
				"operationId" : "deleteKeys",
				"responses" : {
					"204" : {
						"description" : "collection supprimée"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/keys/{keyId}" : {
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Révoque une clef d'accès",
				"description" : "Supprime de manière définitive une clef d'accès API\n",
				"operationId" : "deleteKey",
				"parameters" : [ {
					"name" : "keyId",
					"in" : "path",
					"description" : "identifiant de la clef à supprimer\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Remplace une clef d'accès par une nouvelle",
				"description" : "Modifie les propriétés d'une clef d'accès, et REMPLACE LA CLEF\nPAR UNE NOUVELLE.\n",
				"operationId" : "updateKey",
				"parameters" : [ {
					"name" : "keyId",
					"in" : "path",
					"description" : "identifiant de la clef à modifier\n",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_10"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/ApiKey"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		}
	},
	"components" : {
		"parameters" : {
			"startQuery" : {
				"name" : "start",
				"in" : "query",
				"description" : "filtre optionnel limitant les données à partir\nd'une certaine date de création\n",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"oneOf": [
						{
							"type" : "string",
							"format" : "date-time"
						},
						{
							"type" : "integer",
							"format" : "timestamp"
						}
					]
				}
			},
			"endQuery" : {
				"name" : "end",
				"in" : "query",
				"description" : "filtre optionnel limitant les données jusqu'à\nune certaine date de création\n",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"oneOf": [
						{
							"type" : "string",
							"format" : "date-time"
						},
						{
							"type" : "integer",
							"format" : "timestamp"
						}
					]
				}
			},
			"pageQuery" : {
				"name" : "page",
				"in" : "query",
				"description" : "page de données actuellement consultée ; les données\nles plus récentes sont sur les numéros de page les plus bas\n",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"minimum" : 0,
					"type" : "integer",
					"format" : "int32"
				}
			},
			"pageSizeQuery" : {
				"name" : "page_size",
				"in" : "query",
				"description" : "nombre d'éléments par page",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"minimum" : 1,
					"type" : "integer",
					"format" : "int32"
				}
			}
		},
		"schemas" : {
			"Identifier" : {
				"type" : "object",
				"properties" : {
					"id" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 1
					}
				}
			},
			"Datation" : {
				"type" : "object",
				"properties" : {
					"createdAt" : {
						"type" : "string",
						"format" : "date-time",
						"nullable" : true
					},
					"updatedAt" : {
						"type" : "string",
						"format" : "date-time",
						"nullable" : true
					}
				}
			},
			"Url" : {
				"type" : "object",
				"properties" : {
					"url" : {
						"type" : "string",
						"format" : "uri",
						"example" : "https://pi2p.ird.fr/ressource/1"
					}
				}
			},
			"PaginationMeta" : {
				"type" : "object",
				"properties" : {
					"link" : {
						"type" : "object",
						"properties" : {
							"first" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=0&page_size=10"
							},
							"prev" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=1&page_size=10"
							},
							"next" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=3&page_size=10"
							},
							"last" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=5&page_size=10"
							}
						}
					}
				}
			},
			"Institute" : {
				"type" : "object",
				"properties" : {
					"name" : {
						"type" : "string",
						"example" : "GQE-Le Moulon"
					},
					"countryCode" : {
						"type" : "string",
						"example" : "FRA"
					}
				}
			},
			"Gateway" : {
				"type" : "object",
				"properties" : {
					"instituteId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"name" : {
						"type" : "string",
						"example" : "Raspberry Pi Nairobi"
					},
					"lat" : {
						"type" : "number",
						"nullable" : true,
						"example" : 1.177
					},
					"lon" : {
						"type" : "number",
						"nullable" : true,
						"example" : 36.493
					}
				}
			},
			"Sensor" : {
				"type" : "object",
				"properties" : {
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"name" : {
						"type" : "string",
						"example" : "Température"
					},
					"unit" : {
						"type" : "string",
						"example" : "°C"
					},
					"model" : {
						"type" : "string",
						"example" : "BME680"
					},
					"description" : {
						"type" : "string",
						"example" : "Sur Gateway"
					}
				}
			},
			"Data" : {
				"type" : "object",
				"properties" : {
					"sensorId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 1
					},
					"value" : {
						"type" : "number",
						"example" : 32.05
					}
				}
			},
			"Group" : {
				"type" : "object",
				"properties" : {
					"name" : {
						"type" : "string",
						"example" : "admin"
					},
					"description" : {
						"type" : "string",
						"example" : "Groupe des administrateurs ayant un accès complet à l'API"
					}
				}
			},
			"ApiKey" : {
				"type" : "object",
				"properties" : {
					"key" : {
						"type" : "string",
						"example" : "randomString"
					},
					"groupId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 2
					},
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"description" : {
						"type" : "string",
						"example" : "Clef API de la Gateway 2"
					}
				}
			},
			"ApiKeyWithoutKey" : {
				"type" : "object",
				"properties" : {
					"groupId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 2
					},
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"description" : {
						"type" : "string",
						"example" : "Clef API de la Gateway 2"
					}
				}
			}
		},
		"bodies" : {
			"body" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Institute"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_1" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Institute"
				} ]
			},
			"body_2" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Gateway"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_3" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Gateway"
				} ]
			},
			"body_4" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Sensor"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_5" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Sensor"
				} ]
			},
			"body_6" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Data"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_7" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Group"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_8" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Group"
				} ]
			},
			"body_9" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/ApiKeyWithoutKey"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_10" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/ApiKeyWithoutKey"
				} ]
			}
		},
		"securitySchemes" : {
			"bearerAuth" : {
				"type" : "http",
				"scheme" : "bearer"
			}
		}
	}
}
