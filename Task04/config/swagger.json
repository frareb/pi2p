{
	"openapi" : "3.0.3",
	"info" : {
		"title" : "API PI2P",
		"description" : "This is the PI2P RESTful API documentation page to create, read, update, and delete all entities of the PI2P database. This documentation is made using the [Swagger Open Source Editor](https://swagger.io/tools/swagger-editor/). To exit the API documentation and get back to the PI2P website main menu, click [here](/).",
		"contact" : {
			"email" : "francois [point] rebaudo [arobase] ird [point] fr"
		},
		"license" : {
			"name" : "Proprietary"
		},
		"version" : "1.0.1"
	},
	"servers" : [ {
		"url" : "https://pi2p.ird.fr/",
		"description" : "Single access point"
	} ],
	"tags" : [ {
		"name" : "admins",
		"description" : "Access points reserved for administrators"
	}, {
		"name" : "gateways",
		"description" : "Access points reserved for gateways"
	}, {
		"name" : "guests",
		"description" : "Access points for all"
	} ],
	"paths" : {
		"/institutes" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "List the partner institutes of the project",
				"description" : "Allows you to filter the institutes by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listInstitutes",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "name",
						"in" : "query",
						"description" : "filter institutes by name",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "countryCode",
						"in" : "query",
						"description" : "filter institutes by country",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Institute"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new institute",
				"description" : "Create a new institute, with all its properties",
				"operationId" : "addInstitute",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Institute"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Remove all institutes",
				"description" : "Permanently delete all institutes as well as all child elements from each institute. Thank you for using this request with all the necessary precautions!",
				"operationId" : "deleteInstitutes",
				"responses" : {
					"204" : {
						"description" : "collection deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/institutes/{instituteId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Display the details of an institute",
				"description" : "Display an institute with all its information and relationships",
				"operationId" : "getInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"gateways" : {
															"type" : "array",
															"items" : {
																"type" : "string",
																"format" : "uri",
																"example" : "https://pi2p.ird.fr/gateways/1"
															}
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Institute"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Remove an institute",
				"description" : "Permanently delete an institute and its child elements",
				"operationId" : "deleteInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to be deleted",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Update an institute",
				"description" : "Modify the properties of an institute",
				"operationId" : "updateInstitute",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute to be modified",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_1"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Institute"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/institutes/{instituteId}/report" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "Generate a report for the institute",
				"description" : "Generate, in TeX format, a report of the institute's activity for the given month.",
				"operationId" : "getInstituteReport",
				"parameters" : [ {
					"name" : "instituteId",
					"in" : "path",
					"description" : "id of the institute for which to generate the report",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "month",
					"in" : "query",
					"description" : "number of the month for which to generate the report. By default, the current month is used.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "year",
					"in" : "query",
					"description" : "year for which to generate the report. By default, the current year is used.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				}, {
					"name" : "lang",
					"in" : "query",
					"description" : "Language in which to generate the report.",
					"required" : false,
					"style" : "form",
					"explode" : true,
					"schema" : {
						"type" : "string",
						"enum": ["french", "spanish", "english"]
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "report generation",
						"content" : {
							"application/x-tex" : {}
						}
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/gateways" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "List the gateways",
				"description" : "Allows you to filter the gateways by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listGateways",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "instituteId",
						"in" : "query",
						"description" : "filter the institutes by id of the parent institute",
						"style" : "simple",
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{
						"name" : "name",
						"in" : "query",
						"description" : "filter gateways by name",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Gateway"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new gateway",
				"description" : "Create a new gateway, with all its properties",
				"operationId" : "addGateway",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_2"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Gateway"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete all gateways",
				"description" : "Permanently delete all gateways as well as all child elements of each gateway (sensors and data). Thank you for using this request with all the necessary precautions!",
				"operationId" : "deleteGateways",
				"responses" : {
					"204" : {
						"description" : "deleted collection"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/gateways/{gatewayId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Display the details of a gateway",
				"description" : "Displays a gateway with all its information and relationships",
				"operationId" : "getGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "gateway id to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"institute" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/institutes/1"
														},
														"sensors" : {
															"type" : "array",
															"items" : {
																"type" : "string",
																"format" : "uri",
																"example" : "https://pi2p.ird.fr/sensors/1"
															}
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Gateway"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete a gateway",
				"description" : "Permanently delete a gateway and its child elements (sensors, data).",
				"operationId" : "deleteGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "gateway id to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Update a gateway",
				"description" : "Modify the properties of a gateway",
				"operationId" : "updateGateway",
				"parameters" : [ {
					"name" : "gatewayId",
					"in" : "path",
					"description" : "gateway id to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_3"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Gateway"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "List of sensors containing data",
				"description" : "Allows you to filter the sensors by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listSensors",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "gatewayId",
						"in" : "query",
						"description" : "filter the sensors by id of the parent gateway",
						"style" : "simple",
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{
						"name" : "name",
						"in" : "query",
						"description" : "filter sensors by name",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "unit",
						"in" : "query",
						"description" : "filter sensors by unit of measurement they provide",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					},
					{
						"name" : "model",
						"in" : "query",
						"description" : "filter the sensors by model of the sensor used",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Sensor"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new sensor",
				"description" : "Create a new sensor, with all its properties",
				"operationId" : "addSensor",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_4"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Sensor"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete all sensors",
				"description" : "Permanently delete all sensors and all child elements from each sensor. Thank you for using this request with all the necessary precautions!",
				"operationId" : "deleteSensors",
				"responses" : {
					"204" : {
						"description" : "deleted collection"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors/{sensorId}" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Display the details of a sensor",
				"description" : "Displays a sensor with all its information and relationships",
				"operationId" : "getSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "sensor id to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"type" : "object",
											"properties" : {
												"link" : {
													"type" : "object",
													"properties" : {
														"gateway" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/gateways/1"
														},
														"datas" : {
															"type" : "string",
															"format" : "uri",
															"example" : "https://pi2p.ird.fr/sensors/1/datas"
														}
													}
												}
											}
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Sensor"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete a sensor",
				"description" : "Permanently delete a sensor and its child elements",
				"operationId" : "deleteSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "id of the sensor to be deleted",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Update a sensor",
				"description" : "Modify the properties of a sensor",
				"operationId" : "updateSensor",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "sensor id to modify",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_5"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Sensor"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/sensors/{sensorId}/datas" : {
			"get" : {
				"tags" : [ "guests" ],
				"summary" : "Display data related to a sensor",
				"description" : "Allows you to filter the data of a sensor by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listSensorDatas",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "sensorId",
						"in" : "path",
						"description" : "id of the sensor whose data will be displayed",
						"required" : true,
						"style" : "simple",
						"explode" : true,
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Data"
												}, {
													"$ref" : "#/components/schemas/Datation"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				}
			},
			"post" : {
				"tags" : [ "admins", "gateways" ],
				"summary" : "Add value to sensor data",
				"description" : "For a given sensor, add a value. The unit is that specified in the description of the sensor.",
				"operationId" : "addSensorData",
				"parameters" : [ {
					"name" : "sensorId",
					"in" : "path",
					"description" : "sensor id to which to add a value",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_6"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Data"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete data from a sensor",
				"description" : "Permanently delete selected data from a sensor. Without filter, all data will be deleted!",
				"operationId" : "deleteDatas",
				"parameters" : [
					{
						"name" : "sensorId",
						"in" : "path",
						"description" : "sensor id to which to add a value",
						"required" : true,
						"style" : "simple",
						"explode" : true,
						"schema" : {
							"type" : "integer",
							"format" : "uint32"
						}
					},
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" }
				],
				"responses" : {
					"204" : {
						"description" : "deleted collection"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/groups" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "List the groups hosting sensors",
				"description" : "Allows you to filter the groups by creation date, or simply by listing them all with an appropriate pagination.",
				"operationId" : "listGroups",
				"parameters" : [
					{ "$ref" : "#/components/parameters/startQuery" },
					{ "$ref" : "#/components/parameters/endQuery" },
					{ "$ref" : "#/components/parameters/pageQuery" },
					{ "$ref" : "#/components/parameters/pageSizeQuery" },
					{
						"name" : "name",
						"in" : "query",
						"description" : "filter groups by name",
						"style" : "simple",
						"schema" : {
							"type" : "string"
						}
					}
				],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "object",
									"properties" : {
										"metadata" : {
											"$ref" : "#/components/schemas/PaginationMeta"
										},
										"data" : {
											"type" : "array",
											"items" : {
												"allOf" : [ {
													"$ref" : "#/components/schemas/Identifier"
												}, {
													"$ref" : "#/components/schemas/Group"
												}, {
													"$ref" : "#/components/schemas/Url"
												} ]
											}
										}
									}
								}
							}
						}
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"416" : {
						"description" : "the page is inaccessible"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new group",
				"description" : "Create a new group, with all its properties",
				"operationId" : "addGroup",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_7"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete all groups",
				"description" : "Permanently delete all groups and all child elements from each group. Thank you for using this request with all the necessary precautions!",
				"operationId" : "deleteGroups",
				"responses" : {
					"204" : {
						"description" : "deleted collection"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/groups/{groupId}" : {
			"get" : {
				"tags" : [ "admins" ],
				"summary" : "Display group details",
				"description" : "Displays a group with all its information and relationships",
				"operationId" : "getGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "group id to display",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"200" : {
						"description" : "request success",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"404" : {
						"description" : "the resource was not found"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete a group",
				"description" : "Permanently delete a group and its child elements",
				"operationId" : "deleteGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "group id to delete",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Update a group",
				"description" : "Modify group properties",
				"operationId" : "updateGroup",
				"parameters" : [ {
					"name" : "groupId",
					"in" : "path",
					"description" : "group id to modify",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_8"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/Group"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/keys" : {
			"post" : {
				"tags" : [ "admins" ],
				"summary" : "Create a new access key",
				"description" : "Inserts a new access key, associated with a group and possibly with a gateway. The key itself cannot be forced by the user: it is generated automatically.",
				"operationId" : "addKey",
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_9"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"201" : {
						"description" : "resource creation",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/ApiKey"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Delete all keys",
				"description" : "Permanently delete all access keys. This request can be useful when administrator access is compromised: you can no longer rely on the confidentiality of any key, and you must revoke all of them.",
				"operationId" : "deleteKeys",
				"responses" : {
					"204" : {
						"description" : "deleted collection"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		},
		"/keys/{keyId}" : {
			"delete" : {
				"tags" : [ "admins" ],
				"summary" : "Revoke an access key",
				"description" : "Permanently delete an API access key",
				"operationId" : "deleteKey",
				"parameters" : [ {
					"name" : "keyId",
					"in" : "path",
					"description" : "id of the key to be deleted",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"responses" : {
					"204" : {
						"description" : "resource deleted"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			},
			"patch" : {
				"tags" : [ "admins" ],
				"summary" : "Replace an access key with a new one",
				"description" : "Modifies the properties of an access key, and REPLACES THE KEY WITH A NEW ONE.",
				"operationId" : "updateKey",
				"parameters" : [ {
					"name" : "keyId",
					"in" : "path",
					"description" : "id of the key to modify",
					"required" : true,
					"style" : "simple",
					"explode" : true,
					"schema" : {
						"type" : "integer",
						"format" : "uint32"
					}
				} ],
				"requestBody" : {
					"content" : {
						"application/json" : {
							"schema" : {
								"$ref" : "#/components/bodies/body_10"
							}
						}
					},
					"required" : true
				},
				"responses" : {
					"200" : {
						"description" : "resource update",
						"content" : {
							"application/json" : {
								"schema" : {
									"type" : "array",
									"items" : {
										"allOf" : [ {
											"$ref" : "#/components/schemas/Identifier"
										}, {
											"$ref" : "#/components/schemas/ApiKey"
										}, {
											"$ref" : "#/components/schemas/Datation"
										} ]
									}
								}
							}
						}
					},
					"400" : {
						"description" : "the parameters of the request body are invalid"
					},
					"403" : {
						"description" : "not authorized: the request must come from an administrator key"
					},
					"500" : {
						"description" : "Internal Server Error"
					}
				},
				"security" : [ {
					"bearerAuth" : [ ]
				} ]
			}
		}
	},
	"components" : {
		"parameters" : {
			"startQuery" : {
				"name" : "start",
				"in" : "query",
				"description" : "optional filter limiting data from a certain creation date",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"oneOf": [
						{
							"type" : "string",
							"format" : "date-time"
						},
						{
							"type" : "integer",
							"format" : "timestamp"
						}
					]
				}
			},
			"endQuery" : {
				"name" : "end",
				"in" : "query",
				"description" : "optional filter limiting data up to a certain creation date",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"oneOf": [
						{
							"type" : "string",
							"format" : "date-time"
						},
						{
							"type" : "integer",
							"format" : "timestamp"
						}
					]
				}
			},
			"pageQuery" : {
				"name" : "page",
				"in" : "query",
				"description" : "data page currently being viewed; the most recent data is on the lowest page numbers",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"minimum" : 0,
					"type" : "integer",
					"format" : "int32"
				}
			},
			"pageSizeQuery" : {
				"name" : "page_size",
				"in" : "query",
				"description" : "number of items per page",
				"required" : false,
				"style" : "form",
				"explode" : true,
				"schema" : {
					"minimum" : 1,
					"type" : "integer",
					"format" : "int32"
				}
			}
		},
		"schemas" : {
			"Identifier" : {
				"type" : "object",
				"properties" : {
					"id" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 1
					}
				}
			},
			"Datation" : {
				"type" : "object",
				"properties" : {
					"createdAt" : {
						"type" : "string",
						"format" : "date-time",
						"nullable" : true
					},
					"updatedAt" : {
						"type" : "string",
						"format" : "date-time",
						"nullable" : true
					}
				}
			},
			"Url" : {
				"type" : "object",
				"properties" : {
					"url" : {
						"type" : "string",
						"format" : "uri",
						"example" : "https://pi2p.ird.fr/ressource/1"
					}
				}
			},
			"PaginationMeta" : {
				"type" : "object",
				"properties" : {
					"link" : {
						"type" : "object",
						"properties" : {
							"first" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=0&page_size=10"
							},
							"prev" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=1&page_size=10"
							},
							"next" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=3&page_size=10"
							},
							"last" : {
								"type" : "string",
								"format" : "uri",
								"example" : "https://pi2p.ird.fr/ressource?page=5&page_size=10"
							}
						}
					}
				}
			},
			"Institute" : {
				"type" : "object",
				"properties" : {
					"name" : {
						"type" : "string",
						"example" : "GQE-Le Moulon"
					},
					"countryCode" : {
						"type" : "string",
						"example" : "FRA"
					}
				}
			},
			"Gateway" : {
				"type" : "object",
				"properties" : {
					"instituteId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"name" : {
						"type" : "string",
						"example" : "Raspberry Pi Nairobi"
					},
					"lat" : {
						"type" : "number",
						"nullable" : true,
						"example" : 1.177
					},
					"lon" : {
						"type" : "number",
						"nullable" : true,
						"example" : 36.493
					}
				}
			},
			"Sensor" : {
				"type" : "object",
				"properties" : {
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"name" : {
						"type" : "string",
						"example" : "Température"
					},
					"unit" : {
						"type" : "string",
						"example" : "°C"
					},
					"model" : {
						"type" : "string",
						"example" : "BME680"
					},
					"description" : {
						"type" : "string",
						"example" : "Sur Gateway"
					}
				}
			},
			"Data" : {
				"type" : "object",
				"properties" : {
					"sensorId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 1
					},
					"value" : {
						"type" : "number",
						"example" : 32.05
					}
				}
			},
			"Group" : {
				"type" : "object",
				"properties" : {
					"name" : {
						"type" : "string",
						"example" : "admin"
					},
					"description" : {
						"type" : "string",
						"example" : "Groupe des administrateurs ayant un accès complet à l'API"
					}
				}
			},
			"ApiKey" : {
				"type" : "object",
				"properties" : {
					"key" : {
						"type" : "string",
						"example" : "randomString"
					},
					"groupId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 2
					},
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"description" : {
						"type" : "string",
						"example" : "Clef API de la Gateway 2"
					}
				}
			},
			"ApiKeyWithoutKey" : {
				"type" : "object",
				"properties" : {
					"groupId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 2
					},
					"gatewayId" : {
						"type" : "integer",
						"format" : "uint32",
						"example" : 3
					},
					"description" : {
						"type" : "string",
						"example" : "Clef API de la Gateway 2"
					}
				}
			}
		},
		"bodies" : {
			"body" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Institute"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_1" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Institute"
				} ]
			},
			"body_2" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Gateway"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_3" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Gateway"
				} ]
			},
			"body_4" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Sensor"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_5" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Sensor"
				} ]
			},
			"body_6" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Data"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_7" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Group"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_8" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/Group"
				} ]
			},
			"body_9" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/ApiKeyWithoutKey"
				}, {
					"$ref" : "#/components/schemas/Datation"
				} ]
			},
			"body_10" : {
				"allOf" : [ {
					"$ref" : "#/components/schemas/ApiKeyWithoutKey"
				} ]
			}
		},
		"securitySchemes" : {
			"bearerAuth" : {
				"type" : "http",
				"scheme" : "bearer"
			}
		}
	}
}
